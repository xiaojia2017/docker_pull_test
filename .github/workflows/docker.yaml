name: Aliyun Image Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # 示例：crpi-xxx.cn-shenzhen.personal.cr.aliyuncs.com
  ALIYUN_NAMESPACE: "${{ secrets.ALIYUN_NAMESPACE }}"  # 示例：docker20250406
  ALIYUN_REPO_NAME: "k8s"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  push-image:
    name: Push to Aliyun
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login to Aliyun
      run: |
        echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login \
          -u "${{ env.ALIYUN_REGISTRY_USER }}" \
          --password-stdin "${{ env.ALIYUN_REGISTRY }}"

    - name: Process and Push Images
      run: |
        # 打印关键变量（调试用）
        echo "ALIYUN_REGISTRY: $ALIYUN_REGISTRY"
        echo "ALIYUN_NAMESPACE: $ALIYUN_NAMESPACE"
        echo "ALIYUN_REPO_NAME: $ALIYUN_REPO_NAME"
        
        # 构建基础路径（确保无多余斜杠）
        TARGET_PREFIX="${ALIYUN_REGISTRY%/}/${ALIYUN_NAMESPACE}/${ALIYUN_REPO_NAME}"
        echo "Target repository: $TARGET_PREFIX"

        while IFS= read -r line; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue

          # 提取平台参数
          platform_arg=$(echo "$line" | sed -n 's/.*--platform \([^ ]*\).*/\1/p')
          original_line=$(echo "$line" | sed 's/--platform [^ ]*//')

          # 解析镜像信息
          src_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
          image_name=$(echo "$src_image" | awk -F: '{print $1}')
          image_tag=$(echo "$src_image" | awk -F: '{print $2}')
          
          # 生成安全镜像名（处理特殊字符）
          converted_name=$(echo "$image_name" | sed 's|/|_|g; s|:|-|g' | sed 's/[^a-zA-Z0-9._-]//g')
          safe_image_tag=$(echo "$image_tag" | sed 's|/|_|g; s/[^a-zA-Z0-9._-]//g')
          
          # 添加平台后缀
          final_image="${converted_name}-${safe_image_tag}"
          [ -n "$platform_arg" ] && final_image+="-$(echo "$platform_arg" | tr '/' '_')"

          # 生成完整目标镜像路径
          target_image="${TARGET_PREFIX}:${final_image}"
          echo "Processing: $src_image ==> $target_image"

          # 拉取/处理/推送镜像
          docker pull "$src_image"
          docker tag "$src_image" "$target_image"
          docker push "$target_image"
          docker rmi "$src_image" "$target_image" || true

        done < ./images.txt

    - name: Cleanup
      run: docker system prune -af
