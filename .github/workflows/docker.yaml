name: Aliyun Image Push  # 工作流名称

on:
  workflow_dispatch:     # 允许手动触发
  push:
    branches: [ main ]   # 监听 main 分支的 push 事件

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"       # 阿里云 Registry 地址
  ALIYUN_NAMESPACE: "${{ secrets.ALIYUN_NAMESPACE }}"     # 命名空间
  ALIYUN_REPO_NAME: "k8s"                                # 仓库名称
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"        # AccessKey ID
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # AccessKey Secret

jobs:
  push-image:
    name: Push to Aliyun
    runs-on: ubuntu-latest  # 运行环境

    steps:
      # ========== 1. 检出代码 ==========
      - name: Checkout Code
        uses: actions/checkout@v4  # 使用官方检出动作

      # ========== 2. 登录阿里云 ==========
      - name: Login to Aliyun
        run: |  # 多行命令用 | 符号
          echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login \
            -u "${{ env.ALIYUN_REGISTRY_USER }}" \
            --password-stdin "${{ env.ALIYUN_REGISTRY }}"

      # ========== 3. 镜像处理核心逻辑 ==========
      - name: Process and Push Images
        run: |  # 注意缩进对齐
          # 定义目标路径并清理多余斜杠
          TARGET_PREFIX="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPO_NAME }}"
          TARGET_PREFIX=$(echo "$TARGET_PREFIX" | sed 's|//|/|g; s|/$||')
          echo "目标路径前缀：$TARGET_PREFIX"

          # 处理镜像列表
          while IFS= read -r line; do
            [[ -z "$line" ]] || [[ "$line" =~ ^# ]] && continue  # 跳过空行和注释

            # 提取平台参数（如 --platform linux/amd64）
            platform_arg=$(echo "$line" | sed -n 's/.*--platform \([^ ]*\).*/\1/p')
            original_line=$(echo "$line" | sed 's/--platform [^ ]*//')

            # 解析镜像名称和标签
            src_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
            image_name=$(echo "$src_image" | awk -F: '{print $1}')
            image_tag=$(echo "$src_image" | awk -F: '{print $2}')

            # 生成最终镜像路径
            target_image="${TARGET_PREFIX}:${image_name}-${image_tag}"
            echo "完整镜像路径：${target_image}"

            # Docker 操作
            docker pull "$src_image"
            docker tag "$src_image" "$target_image"
            docker push "$target_image"
            docker rmi "$src_image" "$target_image" || true
          done < ./images.txt

      # ========== 4. 清理阶段 ==========
      - name: Cleanup
        run: docker system prune -af  # 清理 Docker 缓存
