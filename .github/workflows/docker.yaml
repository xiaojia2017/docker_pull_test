name: Aliyun Image Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com"
  ALIYUN_NAME_SPACE: "docker20250406/k8s"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  push-image:
    name: Push to Aliyun
    runs-on: ubuntu-latest

    steps:
    # ========== 1. 检出代码（关键路径修正） ==========
    - name: Checkout Code
      uses: actions/checkout@v4  # 默认检出到$GITHUB_WORKSPACE根目录

    # ========== 2. 验证文件路径 ==========
    - name: Validate Files
      run: |
        echo "===== 当前目录结构 ====="
        ls -al
        echo "===== 验证镜像列表文件 ====="
        if [ ! -f "./images.txt" ]; then
          echo "错误：镜像列表文件不存在于仓库根目录"
          echo "当前路径内容："
          ls -l
          exit 1
        fi

    # ========== 3. 登录阿里云 ==========
    - name: Login to Aliyun
      run: |
        echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login \
          -u "${{ env.ALIYUN_REGISTRY_USER }}" \
          --password-stdin "${{ env.ALIYUN_REGISTRY }}"

    # ========== 4. 镜像处理核心逻辑 ==========
    - name: Process and Push Images
      run: |
        TARGET_PREFIX="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAME_SPACE }}"

        while IFS= read -r line; do
          # 过滤注释和空行
          [[ -z "$line" ]] || [[ "$line" =~ ^# ]] && continue

          # 提取平台参数（如有）
          platform_arg=$(echo "$line" | grep -oP '--platform \K\S+' || true)
          original_line=$(echo "$line" | sed 's/--platform [^ ]*//g')

          # 解析原始镜像名称
          src_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
          
          # 转换镜像名称（保留原始层级结构）
          converted_image=$(echo "$src_image" | sed 's|/|_|g')
          target_image="$TARGET_PREFIX:$converted_image"

          echo "====== 处理镜像：$src_image => $target_image ======"
          
          # 拉取镜像
          docker pull "$src_image"
          
          # 打标签并推送
          docker tag "$src_image" "$target_image"
          docker push "$target_image"
          
          # 清理镜像
          docker rmi "$src_image" "$target_image" || true

        done < ./images.txt  # 直接使用当前目录文件

    # ========== 5. 清理阶段 ==========
    - name: Cleanup
      run: docker system prune -af
