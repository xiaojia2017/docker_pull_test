name: Aliyun Image Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # 仓库地址
  ALIYUN_NAMESPACE: "${{ secrets.ALIYUN_NAMESPACE }}"  # 命名空间
  ALIYUN_REPO_NAME: "k8s"  # 仓库名称
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"  # AccessKey ID
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # AccessKey Secret

jobs:
  push-image:
    name: Push to Aliyun
    runs-on: ubuntu-latest

    steps:
      # ========== 1. 检出代码 ==========
      - name: Checkout Code
        uses: actions/checkout@v4

      # ========== 2. 登录阿里云 ==========
      - name: Login to Aliyun
        run: |
          echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login \
            -u "${{ env.ALIYUN_REGISTRY_USER }}" \
            --password-stdin "${{ env.ALIYUN_REGISTRY }}"

      # ========== 3. 镜像处理核心逻辑 ==========
      - name: Process and Push Images
        run: |
          # 定义目标路径并清理多余斜杠
          TARGET_PREFIX="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPO_NAME }}"
          TARGET_PREFIX=$(echo "$TARGET_PREFIX" | sed 's|//|/|g')
          echo "目标路径前缀：$TARGET_PREFIX"

          while IFS= read -r line; do
            [[ -z "$line" ]] || [[ "$line" =~ ^# ]] && continue

            # 提取平台参数
            platform_arg=$(echo "$line" | sed -n 's/.*--platform \([^ ]*\).*/\1/p')
            original_line=$(echo "$line" | sed 's/--platform [^ ]*//')

            # 解析镜像名称和标签
            src_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
            image_name=$(echo "$src_image" | awk -F: '{print $1}')
            image_tag=$(echo "$src_image" | awk -F: '{print $2}')

            # 转换非法字符（保留路径层级）
            converted_name=$(echo "$image_name" | sed 's|[:@]|-|g')
            safe_image_tag=$(echo "$image_tag" | sed 's|[/:@]|-|g')
            final_image="${converted_name}:${safe_image_tag}"

            # 添加平台后缀
            if [ -n "$platform_arg" ]; then
              platform_suffix="-$(echo "$platform_arg" | tr '/' '_')"
              final_image="${final_image}${platform_suffix}"
            fi

            # 生成最终路径并打印
            target_image="${TARGET_PREFIX}:${final_image}"
            echo "完整镜像路径：${target_image}"

            # 执行Docker操作
            docker pull "$src_image"
            docker tag "$src_image" "$target_image"
            docker push "$target_image"
            docker rmi "$src_image" "$target_image" || true

          done < ./images.txt

      # ========== 4. 清理阶段 ==========
      - name: Cleanup
        run: docker system prune -af
