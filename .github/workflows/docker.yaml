name: DockerHub to Aliyun Mirror

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com"
  ALIYUN_NAMESPACE: "docker20250406/k8s"
  ALIYUN_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  mirror-images:
    name: Mirror Images
    runs-on: ubuntu-latest

    steps:
    # ========== 环境初始化 ==========
    - name: Initialize Docker
      run: |
        sudo rm -rf /var/lib/docker/*
        sudo mkdir -p /etc/docker
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        sleep 5

    # ========== 安全登录 ==========
    - name: Login to Aliyun
      run: |
        echo "$ALIYUN_PASSWORD" | docker login -u $ALIYUN_USER --password-stdin $ALIYUN_REGISTRY

    # ========== 代码检出 ==========
    - name: Checkout Code
      uses: actions/checkout@v4

    # ========== 镜像同步核心逻辑 ==========
    - name: Mirror Images
      run: |
        TARGET_PREFIX="$ALIYUN_REGISTRY/$ALIYUN_NAMESPACE"

        while IFS= read -r line; do
          # 过滤注释和空行
          [[ -z "$line" ]] || [[ "$line" =~ ^# ]] && continue

          # 解析平台参数（如果有）
          platform_arg=$(echo "$line" | grep -oP '--platform \K\S+' || true)
          original_line=$(echo "$line" | sed 's/--platform [^ ]*//g')

          # 处理原始镜像名称
          original_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
          
          # 自动补全docker.io前缀
          if [[ ! "$original_image" =~ / ]]; then
            original_image="docker.io/library/$original_image"
          elif [[ ! "$original_image" =~ ^docker.io/ ]]; then
            original_image="docker.io/$original_image"
          fi

          # 转换镜像名称（替换所有/为_）
          converted_image=$(echo "$original_image" | sed 's|docker.io/||g' | sed 's|/|_|g')
          
          # 生成目标镜像名称
          target_image="$TARGET_PREFIX/$converted_image"
          
          # 添加平台后缀（如果存在）
          if [ -n "$platform_arg" ]; then
            platform_suffix="-$(echo "$platform_arg" | sed 's|/|_|g')"
            target_image="${target_image}${platform_suffix}"
          fi

          echo "====== Syncing: $original_image => $target_image ======"
          
          # 带平台参数的拉取
          pull_cmd="docker pull"
          [ -n "$platform_arg" ] && pull_cmd="$pull_cmd --platform $platform_arg"
          
          if ! $pull_cmd $original_image; then
            echo "Error: Failed to pull $original_image"
            exit 1
          fi

          docker tag $original_image $target_image
          
          if ! docker push $target_image; then
            echo "Error: Failed to push $target_image"
            exit 1
          fi

          docker rmi $original_image $target_image || true

        done < ./images.txt

    # ========== 最终清理 ==========
    - name: Cleanup
      run: |
        docker system prune -af
