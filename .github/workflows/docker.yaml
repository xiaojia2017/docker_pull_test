name: Aliyun Image Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # 示例：crpi-xxx.cn-shenzhen.personal.cr.aliyuncs.com
  ALIYUN_NAMESPACE: "${{ secrets.ALIYUN_NAMESPACE }}"  # 必须配置命名空间（如：docker20250406）
  ALIYUN_REPO_NAME: "k8s"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  push-image:
    name: Push to Aliyun
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login to Aliyun
      run: |
        echo "${{ env.ALIYUN_REGISTRY_PASSWORD }}" | docker login \
          -u "${{ env.ALIYUN_REGISTRY_USER }}" \
          --password-stdin "${{ env.ALIYUN_REGISTRY }}"

    - name: Process and Push Images
      run: |
        # 核心修复：严格遵循阿里云路径规范
        TARGET_PREFIX="${ALIYUN_REGISTRY}/${ALIYUN_NAMESPACE}/${ALIYUN_REPO_NAME}"
        
        # 打印完整推送路径（关键调试信息）
        echo "推送基础路径: $TARGET_PREFIX"
        echo "完整镜像格式: ${TARGET_PREFIX}:<tag>"

        while IFS= read -r line; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue

          # 提取平台参数
          platform_arg=$(echo "$line" | sed -n 's/.*--platform \([^ ]*\).*/\1/p')
          original_line=$(echo "$line" | sed 's/--platform [^ ]*//')

          # 解析镜像信息
          src_image=$(echo "$original_line" | awk '{print $NF}' | sed 's/@sha256:.*//')
          image_name=$(echo "$src_image" | awk -F: '{print $1}')
          image_tag=$(echo "$src_image" | awk -F: '{print $2}')
          
          # 生成安全标签（严格符合Docker规范）
          safe_name=$(echo "$image_name" | sed -E 's#[^a-zA-Z0-9._/-]##g' | tr '/' '_')
          safe_tag=$(echo "$image_tag" | sed -E 's#[^a-zA-Z0-9._-]##g')
          
          # 构建最终标签（包含平台信息）
          final_tag="${safe_name}-${safe_tag}"
          [ -n "$platform_arg" ] && final_tag+="-${platform_arg//\//-}"

          # 生成完整目标镜像地址
          target_image="${TARGET_PREFIX}:${final_tag}"
          echo "处理镜像：$src_image => $target_image"

          # 执行推送操作
          docker pull "$src_image"
          docker tag "$src_image" "$target_image"
          docker push "$target_image"
          docker rmi "$src_image" "$target_image" || true

        done < ./images.txt

    - name: Cleanup
      run: docker system prune -af
