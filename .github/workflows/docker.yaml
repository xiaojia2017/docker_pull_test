name: Docker Image CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com"
  ALIYUN_NAMESPACE: "docker20250406/k8s"
  ALIYUN_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest

    steps:
    # ========== 关键修复1：彻底重置Docker环境 ==========
    - name: Clean Docker Environment
      run: |
        sudo systemctl stop docker
        sudo rm -rf /var/lib/docker/*
        sudo mkdir -p /etc/docker
        echo '{
          "registry-mirrors": ["https://registry.cn-hangzhou.aliyuncs.com"],
          "experimental": true,
          "dns": ["223.5.5.5", "8.8.8.8"]
        }' | sudo tee /etc/docker/daemon.json
        sudo systemctl start docker
        sleep 15
        docker info

    # ========== 关键修复2：精确指定文件路径 ==========
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        path: '.'  # 明确指定检出到根目录

    # ========== 关键修复3：Buildx特殊配置 ==========
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=registry.cn-hangzhou.aliyuncs.com/mirror/buildkit:v0.12.1  # 使用阿里云官方镜像
          network=host
          --debug

    # ========== 新增验证步骤 ==========
    - name: Validate Environment
      run: |
        echo "===== 验证文件存在 ====="
        ls -l .github/workflows/  # 确认工作流文件位置
        ls -l images.txt         # 确认镜像列表在根目录
        
        echo "===== 网络连通性测试 ====="
        ping -c 4 crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com
        curl -I https://registry.cn-hangzhou.aliyuncs.com

    # ========== 镜像处理流程优化 ==========
    - name: Process Images
      run: |
        # 登录镜像仓库（带重试）
        for i in {1..3}; do
          docker login -u $ALIYUN_USER -p $ALIYUN_PASSWORD $ALIYUN_REGISTRY && break || sleep 10
        done

        # 完整目标地址
        TARGET="$ALIYUN_REGISTRY/$ALIYUN_NAMESPACE"

        # 处理镜像列表（精确路径）
        while IFS= read -r line; do
          # 过滤注释和空行
          [[ "$line" =~ ^#.* ]] || [[ -z "$line" ]] && continue

          # 解析原始镜像
          original=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          
          # 生成目标镜像名称
          tag=$(echo "$original" | awk -F/ '{print $NF}')
          platform=$(echo "$line" | grep -oP '--platform \K\S+' || true)
          [ -n "$platform" ] && suffix="-${platform//\//_}" || suffix=""
          
          target_image="${TARGET}/${tag}${suffix}"

          # 带日志的输出
          echo "====== Processing: $original => $target_image ======"
          
          # 镜像操作（带错误捕获）
          docker pull $original || exit 1
          docker tag $original $target_image
          docker push $target_image || exit 1
          docker rmi $original $target_image

        done < ./images.txt  # 精确指定文件路径

      env:
        DOCKER_CLI_EXPERIMENTAL: enabled

    # ========== 最终清理 ==========
    - name: Final Cleanup
      run: |
        docker system prune -af
        echo "===== 磁盘状态 ====="
        df -hT
