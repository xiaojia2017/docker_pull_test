name: Docker Image CI/CD Pipeline

# 触发条件：手动触发或main分支推送时触发
on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  # 阿里云容器镜像服务配置
  ALIYUN_REGISTRY: "crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com"  # 注册表地址
  ALIYUN_NAME_SPACE: "docker20250406/k8s"  # 命名空间+子目录
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"  # 从GitHub Secrets获取用户名
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # 从GitHub Secrets获取密码

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest  # 使用最新版Ubuntu运行器
    
    steps:
    # ====================== 初始化阶段 ======================
    - name: Check Disk Space (Before)
      run: |
        echo "初始磁盘空间状态："
        echo "================================================================"
        df -hT  # 显示磁盘使用情况
        echo "================================================================"

    # 使用空间优化插件（保留2GB空间，创建128MB交换空间）
    - name: Optimize Disk Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'  # 移除.NET相关组件
        remove-haskell: 'true'  # 移除Haskell相关组件

    - name: Restart Docker Daemon
      run: sudo service docker restart  # 重启Docker服务应用更改

    - name: Check Disk Space (After)
      run: |
        echo "优化后磁盘空间状态："
        echo "================================================================"
        df -hT
        echo "================================================================"

    # ====================== 代码检出阶段 ======================
    - name: Checkout Repository
      uses: actions/checkout@v4  # 检出Git仓库代码
      with:
        fetch-depth: 1  # 仅获取最新提交历史

    # ====================== Docker环境配置 ======================
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3  # 配置Buildx多架构构建
      with:
        driver-opts: |
          image=moby/buildkit:master  # 使用最新版BuildKit

    # ====================== 镜像构建推送阶段 ======================
    - name: Build and Push Images
      run: |
        # 登录阿里云容器镜像服务
        echo "正在登录阿里云容器镜像服务..."
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

        # 定义目标镜像仓库路径
        TARGET_REGISTRY="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE"
        echo "目标镜像仓库路径：$TARGET_REGISTRY"

        # 处理images.txt中的每个镜像
        while IFS= read -r line || [ -n "$line" ]; do
          # 跳过空行和注释行
          [[ -z "$line" ]] && continue
          [[ "$line" =~ ^\s*# ]] && continue

          echo "处理镜像：$line"
          
          # 解析平台架构信息（如果有）
          platform=$(echo "$line" | grep -oP '--platform \K\S+') || true
          if [ -n "$platform" ]; then
            platform_prefix="${platform//\//_}_"  # 转换架构格式：linux/amd64 -> linux_amd64_
          else
            platform_prefix=""
          fi

          # 解析原始镜像名称
          original_image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$original_image" | awk -F/ '{print $NF}')
          image_name=$(echo "$image_name_tag" | cut -d: -f1)
          
          # 生成目标镜像名称
          target_image="$TARGET_REGISTRY/${platform_prefix}${image_name_tag}"
          echo "生成目标镜像名称：$target_image"

          # 拉取原始镜像
          echo "正在拉取原始镜像：$original_image"
          docker pull $original_image

          # 打标签
          echo "正在打标签：$original_image => $target_image"
          docker tag $original_image $target_image

          # 推送镜像
          echo "正在推送镜像：$target_image"
          docker push $target_image

          # 清理本地镜像
          echo "清理本地镜像..."
          docker rmi $original_image $target_image
          
          # 显示磁盘使用情况
          echo "当前磁盘状态："
          df -hT
          
        done < images.txt  # 从images.txt读取镜像列表

      env:
        # 传递环境变量给shell脚本
        ALIYUN_REGISTRY: ${{ env.ALIYUN_REGISTRY }}
        ALIYUN_NAME_SPACE: ${{ env.ALIYUN_NAME_SPACE }}

    # ====================== 最终清理阶段 ======================
    - name: Final Cleanup
      run: |
        echo "最终磁盘空间状态："
        echo "================================================================"
        df -hT
        echo "================================================================"
        docker system prune -af  # 清理所有Docker缓存
