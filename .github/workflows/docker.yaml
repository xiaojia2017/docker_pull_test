name: Docker Image CI/CD Pipeline

# 触发机制：手动触发或main分支推送时自动运行
on:
  workflow_dispatch:  # 允许在GitHub界面手动触发
  push:
    branches: [ main ]  # 只在main分支推送时触发

env:
  # 阿里云容器镜像服务配置
  ALIYUN_REGISTRY: "crpi-qdxa7r1jpsbtqqwp.cn-shenzhen.personal.cr.aliyuncs.com"  # 完整的注册表地址
  ALIYUN_NAME_SPACE: "docker20250406/k8s"  # 命名空间+子目录路径（必须与阿里云仓库结构完全一致）
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"  # 使用GitHub加密存储的账号
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"  # 使用GitHub加密存储的密码

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest  # 使用GitHub托管的最新Ubuntu运行器

    steps:
    # ====================== 系统初始化阶段 ======================
    - name: Check Disk Space (Before)
      run: |
        echo "初始磁盘空间状态："
        echo "================================================================"
        df -hT  # 显示完整的磁盘使用情况（调试用）
        echo "================================================================"

    # 使用空间优化插件（关键步骤：GitHub运行器磁盘空间有限）
    - name: Optimize Disk Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048  # 保留2GB空间防止系统崩溃
        swap-size-mb: 128  # 创建交换空间应对内存不足
        remove-dotnet: 'true'  # 移除.NET框架（ELK不需要）
        remove-haskell: 'true'  # 移除Haskell工具链

    - name: Restart Docker Daemon
      run: sudo service docker restart  # 必须重启使磁盘空间变更生效

    - name: Check Disk Space (After)
      run: |
        echo "优化后磁盘空间状态："
        echo "================================================================"
        df -hT  # 验证空间优化效果
        echo "================================================================"

    # ====================== 代码准备阶段 ======================
    - name: Checkout Repository
      uses: actions/checkout@v4  # 官方推荐的代码检出动作
      with:
        fetch-depth: 1  # 只拉取最新提交（加速检出过程）

    # ====================== Docker环境配置阶段 ======================
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3  # 官方多架构构建工具
      with:
        install: true  # 确保buildx已安装
        driver: docker-container  # 使用容器驱动（支持多平台构建）
        buildkitd-flags: --allow-insecure-entitlement security.insecure  # 允许不安全操作（某些场景需要）
        driver-opts: |
          image=docker.io/moby/buildkit:v0.12.1  # 使用完整镜像地址+固定版本（避免invalid reference错误）
          network=host  # 强制使用主机网络（解决国内拉取镜像慢的问题）

    # 验证Buildx配置（关键调试步骤）
    - name: Verify Buildx Configuration
      run: |
        echo "===== Buildx版本 ====="
        docker buildx version  # 显示buildx版本确认安装成功
        echo "\n===== Buildx实例列表 ====="
        docker buildx ls  # 列出所有构建器实例
        echo "\n===== 当前构建器详情 ====="
        docker buildx inspect --bootstrap  # 显示详细构建器信息

    # ====================== 镜像处理阶段 ======================
    - name: Build and Push Images
      run: |
        # 登录阿里云镜像仓库（必须先认证）
        echo "正在登录阿里云容器镜像服务..."
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

        # 组合完整目标路径（必须严格符合阿里云仓库结构）
        TARGET_REGISTRY="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE"
        echo "目标镜像仓库路径：$TARGET_REGISTRY"

        # 逐行处理images.txt文件
        while IFS= read -r line || [ -n "$line" ]; do
          # 跳过空行和注释行（避免处理无效数据）
          [[ -z "$line" ]] && continue
          [[ "$line" =~ ^\s*# ]] && continue

          echo "处理镜像：$line"
          
          # 提取平台架构信息（如果有）
          platform=$(echo "$line" | grep -oP '--platform \K\S+' || true)
          if [ -n "$platform" ]; then
            # 转换架构格式：linux/amd64 -> linux_amd64_（符合阿里云tag规范）
            platform_prefix="${platform//\//_}_"
          else
            platform_prefix=""
          fi

          # 解析原始镜像名称（关键数据处理步骤）
          original_image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)  # 去除SHA256校验信息
          image_name_tag=$(echo "$original_image" | awk -F/ '{print $NF}')  # 提取镜像名+标签
          image_name=$(echo "$image_name_tag" | cut -d: -f1)  # 单独提取镜像名

          # 生成最终目标镜像名称（必须符合阿里云命名规范）
          target_image="$TARGET_REGISTRY/${platform_prefix}${image_name_tag}"
          echo "生成目标镜像名称：$target_image"

          # 拉取原始镜像（可能来自Docker Hub或其他仓库）
          echo "正在拉取原始镜像：$original_image"
          docker pull $original_image || { echo "镜像拉取失败！"; exit 1; }

          # 重新打标签（指向阿里云目标仓库）
          echo "正在打标签：$original_image => $target_image"
          docker tag $original_image $target_image

          # 推送镜像到阿里云（核心操作）
          echo "正在推送镜像：$target_image"
          docker push $target_image || { echo "镜像推送失败！"; exit 1; }

          # 清理本地镜像（关键：节省磁盘空间）
          echo "清理本地镜像..."
          docker rmi $original_image $target_image || true  # 忽略可能的删除错误
          
          # 显示当前磁盘状态（调试用）
          echo "当前磁盘状态："
          df -hT
          
        done < images.txt  # 从images.txt读取镜像列表

      env:
        # 传递环境变量给shell（必须显式声明）
        ALIYUN_REGISTRY: ${{ env.ALIYUN_REGISTRY }}
        ALIYUN_NAME_SPACE: ${{ env.ALIYUN_NAME_SPACE }}

    # ====================== 最终清理阶段 ======================
    - name: Final Cleanup
      run: |
        echo "最终磁盘空间状态："
        echo "================================================================"
        df -hT  # 显示最终磁盘使用情况
        echo "================================================================"
        docker system prune -af  # 清理所有Docker缓存（重要：为后续任务腾出空间）
